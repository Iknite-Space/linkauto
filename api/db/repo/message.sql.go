// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (fname,lname,email,gender,phone,zip_code,city,street,region,role)
VALUES ($1, $2, $3,$4,$5,$6,$7,$8,$9,$10)
RETURNING email
`

type CreateUserParams struct {
	Fname   string `json:"fname"`
	Lname   string `json:"lname"`
	Email   string `json:"email"`
	Gender  string `json:"gender"`
	Phone   string `json:"phone"`
	ZipCode string `json:"zip_code"`
	City    string `json:"city"`
	Street  string `json:"street"`
	Region  string `json:"region"`
	Role    string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Gender,
		arg.Phone,
		arg.ZipCode,
		arg.City,
		arg.Street,
		arg.Region,
		arg.Role,
	)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT Uuid,email,lname,role,account_status FROM "user" WHERE email = $1
`

type GetUserByEmailRow struct {
	Uuid          string `json:"uuid"`
	Email         string `json:"email"`
	Lname         string `json:"lname"`
	Role          string `json:"role"`
	AccountStatus string `json:"account_status"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Lname,
		&i.Role,
		&i.AccountStatus,
	)
	return i, err
}

const getUserVerificationDetails = `-- name: GetUserVerificationDetails :one
SELECT 
    u.uuid AS user_uuid,
    CONCAT(u.fname, ' ', u.lname) AS name,
    u.gender,
    v.verification_type,
    v.ver_doc1_url,
    v.ver_doc2_url
FROM "user" u
JOIN verification v ON u.uuid = v.user_uuid
WHERE u.uuid = $1
`

type GetUserVerificationDetailsRow struct {
	UserUuid         string      `json:"user_uuid"`
	Name             interface{} `json:"name"`
	Gender           string      `json:"gender"`
	VerificationType string      `json:"verification_type"`
	VerDoc1Url       string      `json:"ver_doc1_url"`
	VerDoc2Url       string      `json:"ver_doc2_url"`
}

func (q *Queries) GetUserVerificationDetails(ctx context.Context, uuid string) (GetUserVerificationDetailsRow, error) {
	row := q.db.QueryRow(ctx, getUserVerificationDetails, uuid)
	var i GetUserVerificationDetailsRow
	err := row.Scan(
		&i.UserUuid,
		&i.Name,
		&i.Gender,
		&i.VerificationType,
		&i.VerDoc1Url,
		&i.VerDoc2Url,
	)
	return i, err
}

const getUsersPendingVerification = `-- name: GetUsersPendingVerification :many
SELECT Uuid, CONCAT(fname, ' ', lname) AS name, account_status AS status, email,role FROM "user"
WHERE account_status = 'pending'
`

type GetUsersPendingVerificationRow struct {
	Uuid   string      `json:"uuid"`
	Name   interface{} `json:"name"`
	Status string      `json:"status"`
	Email  string      `json:"email"`
	Role   string      `json:"role"`
}

func (q *Queries) GetUsersPendingVerification(ctx context.Context) ([]GetUsersPendingVerificationRow, error) {
	rows, err := q.db.Query(ctx, getUsersPendingVerification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersPendingVerificationRow{}
	for rows.Next() {
		var i GetUsersPendingVerificationRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Status,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerificationByUserUuid = `-- name: GetVerificationByUserUuid :one
SELECT uuid, user_uuid, verification_type, ver_doc1_url, ver_doc2_url FROM verification WHERE user_uuid = $1 LIMIT 1
`

func (q *Queries) GetVerificationByUserUuid(ctx context.Context, userUuid string) (Verification, error) {
	row := q.db.QueryRow(ctx, getVerificationByUserUuid, userUuid)
	var i Verification
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.VerificationType,
		&i.VerDoc1Url,
		&i.VerDoc2Url,
	)
	return i, err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE "user"
SET account_status = $1
WHERE uuid = $2
`

type UpdateUserVerificationStatusParams struct {
	AccountStatus string `json:"account_status"`
	Uuid          string `json:"uuid"`
}

func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, arg UpdateUserVerificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserVerificationStatus, arg.AccountStatus, arg.Uuid)
	return err
}

const uploadVerificationDocs = `-- name: UploadVerificationDocs :exec
INSERT INTO verification (user_uuid, verification_type, ver_doc1_url,ver_doc2_url)
VALUES ($1, $2, $3, $4)
`

type UploadVerificationDocsParams struct {
	UserUuid         string `json:"user_uuid"`
	VerificationType string `json:"verification_type"`
	VerDoc1Url       string `json:"ver_doc1_url"`
	VerDoc2Url       string `json:"ver_doc2_url"`
}

func (q *Queries) UploadVerificationDocs(ctx context.Context, arg UploadVerificationDocsParams) error {
	_, err := q.db.Exec(ctx, uploadVerificationDocs,
		arg.UserUuid,
		arg.VerificationType,
		arg.VerDoc1Url,
		arg.VerDoc2Url,
	)
	return err
}
