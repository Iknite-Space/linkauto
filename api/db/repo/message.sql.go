// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCar = `-- name: CreateCar :one
INSERT INTO "car" (owner_uuid,pickup_location,dropoff_location)
VALUES($1,$2,$3)
RETURNING uuid
`

type CreateCarParams struct {
	OwnerUuid       string `json:"owner_uuid"`
	PickupLocation  string `json:"pickup_location"`
	DropoffLocation string `json:"dropoff_location"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (string, error) {
	row := q.db.QueryRow(ctx, createCar, arg.OwnerUuid, arg.PickupLocation, arg.DropoffLocation)
	var uuid string
	err := row.Scan(&uuid)
	return uuid, err
}

const createCarDetails = `-- name: CreateCarDetails :exec
INSERT INTO "car_details" (car_uuid,name,model,energy_type,transmission_type,brand,no_seats,color,chassis_no,vin,price_per_day,cat_doc,visite_technique_doc,insurance_doc)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
`

type CreateCarDetailsParams struct {
	CarUuid            string         `json:"car_uuid"`
	Name               string         `json:"name"`
	Model              string         `json:"model"`
	EnergyType         string         `json:"energy_type"`
	TransmissionType   string         `json:"transmission_type"`
	Brand              string         `json:"brand"`
	NoSeats            *int32         `json:"no_seats"`
	Color              string         `json:"color"`
	ChassisNo          string         `json:"chassis_no"`
	Vin                string         `json:"vin"`
	PricePerDay        pgtype.Numeric `json:"price_per_day"`
	CatDoc             string         `json:"cat_doc"`
	VisiteTechniqueDoc string         `json:"visite_technique_doc"`
	InsuranceDoc       string         `json:"insurance_doc"`
}

func (q *Queries) CreateCarDetails(ctx context.Context, arg CreateCarDetailsParams) error {
	_, err := q.db.Exec(ctx, createCarDetails,
		arg.CarUuid,
		arg.Name,
		arg.Model,
		arg.EnergyType,
		arg.TransmissionType,
		arg.Brand,
		arg.NoSeats,
		arg.Color,
		arg.ChassisNo,
		arg.Vin,
		arg.PricePerDay,
		arg.CatDoc,
		arg.VisiteTechniqueDoc,
		arg.InsuranceDoc,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (fname,lname,email,gender,phone,zip_code,city,street,region,role)
VALUES ($1, $2, $3,$4,$5,$6,$7,$8,$9,$10)
RETURNING email
`

type CreateUserParams struct {
	Fname   string `json:"fname"`
	Lname   string `json:"lname"`
	Email   string `json:"email"`
	Gender  string `json:"gender"`
	Phone   string `json:"phone"`
	ZipCode string `json:"zip_code"`
	City    string `json:"city"`
	Street  string `json:"street"`
	Region  string `json:"region"`
	Role    string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Gender,
		arg.Phone,
		arg.ZipCode,
		arg.City,
		arg.Street,
		arg.Region,
		arg.Role,
	)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getCarDetails = `-- name: GetCarDetails :one
SELECT c.pickup_location,c.dropoff_location,cd.name,
cd.model,cd.energy_type,cd.transmission_type,cd.brand,cd.no_seats,
cd.color,cd.chassis_no,cd.vin,cd.price_per_day FROM car c
JOIN car_details cd ON c.uuid = cd.car_uuid
WHERE c.uuid = $1
`

type GetCarDetailsRow struct {
	PickupLocation   string         `json:"pickup_location"`
	DropoffLocation  string         `json:"dropoff_location"`
	Name             string         `json:"name"`
	Model            string         `json:"model"`
	EnergyType       string         `json:"energy_type"`
	TransmissionType string         `json:"transmission_type"`
	Brand            string         `json:"brand"`
	NoSeats          *int32         `json:"no_seats"`
	Color            string         `json:"color"`
	ChassisNo        string         `json:"chassis_no"`
	Vin              string         `json:"vin"`
	PricePerDay      pgtype.Numeric `json:"price_per_day"`
}

func (q *Queries) GetCarDetails(ctx context.Context, uuid string) (GetCarDetailsRow, error) {
	row := q.db.QueryRow(ctx, getCarDetails, uuid)
	var i GetCarDetailsRow
	err := row.Scan(
		&i.PickupLocation,
		&i.DropoffLocation,
		&i.Name,
		&i.Model,
		&i.EnergyType,
		&i.TransmissionType,
		&i.Brand,
		&i.NoSeats,
		&i.Color,
		&i.ChassisNo,
		&i.Vin,
		&i.PricePerDay,
	)
	return i, err
}

const getCarImages = `-- name: GetCarImages :many
SELECT image FROM car_gallery WHERE car_uuid = $1
`

func (q *Queries) GetCarImages(ctx context.Context, carUuid string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCarImages, carUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var image string
		if err := rows.Scan(&image); err != nil {
			return nil, err
		}
		items = append(items, image)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCarListingImages = `-- name: GetCarListingImages :many
SELECT image FROM car_gallery WHERE car_uuid = $1
LIMIT 2
`

func (q *Queries) GetCarListingImages(ctx context.Context, carUuid string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCarListingImages, carUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var image string
		if err := rows.Scan(&image); err != nil {
			return nil, err
		}
		items = append(items, image)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCarListings = `-- name: GetCarListings :many
SELECT c.uuid,cd.name,cd.transmission_type,cd.no_seats,cd.energy_type,cd.brand,cd.price_per_day FROM car c
JOIN car_details cd ON c.uuid = cd.car_uuid
ORDER BY cd.date_added
`

type GetCarListingsRow struct {
	Uuid             string         `json:"uuid"`
	Name             string         `json:"name"`
	TransmissionType string         `json:"transmission_type"`
	NoSeats          *int32         `json:"no_seats"`
	EnergyType       string         `json:"energy_type"`
	Brand            string         `json:"brand"`
	PricePerDay      pgtype.Numeric `json:"price_per_day"`
}

func (q *Queries) GetCarListings(ctx context.Context) ([]GetCarListingsRow, error) {
	rows, err := q.db.Query(ctx, getCarListings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCarListingsRow{}
	for rows.Next() {
		var i GetCarListingsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.TransmissionType,
			&i.NoSeats,
			&i.EnergyType,
			&i.Brand,
			&i.PricePerDay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}


const getCarPendingVerifications = `-- name: GetCarPendingVerifications :many
SELECT 
  CONCAT(u.fname, ' ', u.lname) AS owner_name,
  c.uuid,
  c.visibility,
  cd.name
FROM "user" u
JOIN car c ON u.uuid::TEXT = c.owner_uuid
JOIN car_details cd ON c.uuid::text = cd.car_uuid
WHERE c.visibility = 'pending'
`

type GetCarPendingVerificationsRow struct {
	OwnerName  interface{} `json:"owner_name"`
	Uuid       string      `json:"uuid"`
	Visibility string      `json:"visibility"`
	Name       string      `json:"name"`
}

func (q *Queries) GetCarPendingVerifications(ctx context.Context) ([]GetCarPendingVerificationsRow, error) {
	rows, err := q.db.Query(ctx, getCarPendingVerifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCarPendingVerificationsRow{}
	for rows.Next() {
		var i GetCarPendingVerificationsRow
		if err := rows.Scan(
			&i.OwnerName,
			&i.Uuid,
			&i.Visibility,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil

const getCarVerificationDetails = `-- name: GetCarVerificationDetails :one
SELECT 
  u.uuid AS user_uuid,
  CONCAT(u.fname, ' ', u.lname) AS name,
  u.gender,
  cd.cat_doc,
  cd.visite_technique_doc,
  cd.insurance_doc
FROM "car" c
JOIN "user" u ON u.uuid = c.owner_uuid
JOIN car_details cd ON c.uuid = cd.car_uuid
WHERE c.uuid = $1
`

type GetCarVerificationDetailsRow struct {
	UserUuid           string      `json:"user_uuid"`
	Name               interface{} `json:"name"`
	Gender             string      `json:"gender"`
	CatDoc             string      `json:"cat_doc"`
	VisiteTechniqueDoc string      `json:"visite_technique_doc"`
	InsuranceDoc       string      `json:"insurance_doc"`
}

func (q *Queries) GetCarVerificationDetails(ctx context.Context, uuid string) (GetCarVerificationDetailsRow, error) {
	row := q.db.QueryRow(ctx, getCarVerificationDetails, uuid)
	var i GetCarVerificationDetailsRow
	err := row.Scan(
		&i.UserUuid,
		&i.Name,
		&i.Gender,
		&i.CatDoc,
		&i.VisiteTechniqueDoc,
		&i.InsuranceDoc,
	)
	return i, err

}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT Uuid,email,lname,role,account_status FROM "user" WHERE email = $1
`

type GetUserByEmailRow struct {
	Uuid          string `json:"uuid"`
	Email         string `json:"email"`
	Lname         string `json:"lname"`
	Role          string `json:"role"`
	AccountStatus string `json:"account_status"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Lname,
		&i.Role,
		&i.AccountStatus,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT Uuid,account_status FROM "user" WHERE uuid = $1
`

type GetUserByUuidRow struct {
	Uuid          string `json:"uuid"`
	AccountStatus string `json:"account_status"`
}

func (q *Queries) GetUserByUuid(ctx context.Context, uuid string) (GetUserByUuidRow, error) {
	row := q.db.QueryRow(ctx, getUserByUuid, uuid)
	var i GetUserByUuidRow
	err := row.Scan(&i.Uuid, &i.AccountStatus)
	return i, err
}

const getUserVerificationDetails = `-- name: GetUserVerificationDetails :one
SELECT 
    u.uuid AS user_uuid,
    CONCAT(u.fname, ' ', u.lname) AS name,
    u.gender,
    v.verification_type,
    v.ver_doc1_url,
    v.ver_doc2_url
FROM "user" u
JOIN verification v ON u.uuid = v.user_uuid
WHERE u.uuid = $1
`

type GetUserVerificationDetailsRow struct {
	UserUuid         string      `json:"user_uuid"`
	Name             interface{} `json:"name"`
	Gender           string      `json:"gender"`
	VerificationType string      `json:"verification_type"`
	VerDoc1Url       string      `json:"ver_doc1_url"`
	VerDoc2Url       string      `json:"ver_doc2_url"`
}

func (q *Queries) GetUserVerificationDetails(ctx context.Context, uuid string) (GetUserVerificationDetailsRow, error) {
	row := q.db.QueryRow(ctx, getUserVerificationDetails, uuid)
	var i GetUserVerificationDetailsRow
	err := row.Scan(
		&i.UserUuid,
		&i.Name,
		&i.Gender,
		&i.VerificationType,
		&i.VerDoc1Url,
		&i.VerDoc2Url,
	)
	return i, err
}

const getUsersPendingVerification = `-- name: GetUsersPendingVerification :many
SELECT 
  u.uuid,
  CONCAT(u.fname, ' ', u.lname) AS name,
  u.account_status AS status,
  u.email,
  u.role
FROM "user" u
INNER JOIN verification v ON v.user_uuid = u.uuid
WHERE u.account_status = 'pending'
`

type GetUsersPendingVerificationRow struct {
	Uuid   string      `json:"uuid"`
	Name   interface{} `json:"name"`
	Status string      `json:"status"`
	Email  string      `json:"email"`
	Role   string      `json:"role"`
}

func (q *Queries) GetUsersPendingVerification(ctx context.Context) ([]GetUsersPendingVerificationRow, error) {
	rows, err := q.db.Query(ctx, getUsersPendingVerification)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersPendingVerificationRow{}
	for rows.Next() {
		var i GetUsersPendingVerificationRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Status,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerificationByUserUuid = `-- name: GetVerificationByUserUuid :one
SELECT uuid, user_uuid, verification_type, ver_doc1_url, ver_doc2_url FROM verification WHERE user_uuid = $1 LIMIT 1
`

func (q *Queries) GetVerificationByUserUuid(ctx context.Context, userUuid string) (Verification, error) {
	row := q.db.QueryRow(ctx, getVerificationByUserUuid, userUuid)
	var i Verification
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.VerificationType,
		&i.VerDoc1Url,
		&i.VerDoc2Url,
	)
	return i, err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE "user"
SET account_status = $1
WHERE uuid = $2
`

type UpdateUserVerificationStatusParams struct {
	AccountStatus string `json:"account_status"`
	Uuid          string `json:"uuid"`
}

func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, arg UpdateUserVerificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserVerificationStatus, arg.AccountStatus, arg.Uuid)
	return err
}

const uploadCarImage = `-- name: UploadCarImage :exec
INSERT INTO "car_gallery" (car_uuid,image)
VALUES ($1,$2)
`

type UploadCarImageParams struct {
	CarUuid string `json:"car_uuid"`
	Image   string `json:"image"`
}

func (q *Queries) UploadCarImage(ctx context.Context, arg UploadCarImageParams) error {
	_, err := q.db.Exec(ctx, uploadCarImage, arg.CarUuid, arg.Image)
	return err
}

const uploadVerificationDocs = `-- name: UploadVerificationDocs :exec
INSERT INTO verification (user_uuid, verification_type, ver_doc1_url,ver_doc2_url)
VALUES ($1, $2, $3, $4)
`

type UploadVerificationDocsParams struct {
	UserUuid         string `json:"user_uuid"`
	VerificationType string `json:"verification_type"`
	VerDoc1Url       string `json:"ver_doc1_url"`
	VerDoc2Url       string `json:"ver_doc2_url"`
}

func (q *Queries) UploadVerificationDocs(ctx context.Context, arg UploadVerificationDocsParams) error {
	_, err := q.db.Exec(ctx, uploadVerificationDocs,
		arg.UserUuid,
		arg.VerificationType,
		arg.VerDoc1Url,
		arg.VerDoc2Url,
	)
	return err
}
